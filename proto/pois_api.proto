syntax = "proto3";

package pois.api;

option go_package="../pois_rpc";


service PoisApi {
  rpc request_miner_get_new_key(RequestMinerInitParam)
      returns (ResponseMinerInitParam) {}
  rpc request_miner_register(RequestMinerInitParam)
      returns (ResponseMinerRegister) {}
  rpc request_miner_commit_gen_chall(RequestMinerCommitGenChall)
      returns (Challenge) {}
  rpc request_verify_commit_proof(RequestVerifyCommitAndAccProof)
      returns (ResponseVerifyCommitAndAccProof) {}
}

message ResponseMinerRegister{
  bool status = 1;
}

message RequestMinerInitParam{
  bytes miner_id = 1;
}

message ResponseMinerInitParam{
  bytes acc = 1;//init value is from g in RsaKey
  bytes key_n = 2;//RsaKey n
  bytes key_g = 3;//RsaKey g
  int64 front = 4;//begin with 0
  int64 rear = 5;//begin with 0
  bytes miner_id = 6;//miner id
  bytes signature = 7;//sig all
}

message RequestMinerCommitGenChall {
  bytes miner_id = 1;
  repeated Commit commit = 2;

  // This is acc data to set the ProverNode
  ProverAcc prover_acc = 3;
}
message ProverAcc {
  bytes acc = 1;
}
message Commit {
  int64 file_index = 1;
  repeated bytes roots = 2;
}

message Challenge {
  repeated Int64Slice rows = 1;
}
message Int64Slice {
  repeated int64 values = 1;
}

message RequestVerifyCommitAndAccProof {
  CommitProofGroup commit_proof_group = 1;
  AccProof acc_proof = 2;
  bytes miner_id = 3;
}
message CommitProofGroup {
  repeated CommitProofGroupInner commit_proof_group_inner = 1;
}
message CommitProofGroupInner {
  repeated CommitProof commit_proof = 1;
}
message CommitProof {
  MhtProof node = 1;
  repeated MhtProof parents = 2;
}
message MhtProof {
  int32 index = 1;
  bytes label = 2;
  repeated bytes paths = 3;
  bytes locs = 4;
}

message AccProof {
  repeated int64 indexs = 1;
  repeated bytes labels = 2;
  AccWitnessNode wit_chains = 3;
  repeated bytes acc_path = 4;
}
message AccWitnessNode {
  bytes elem = 1;
  bytes wit = 2;
  AccWitnessNode acc = 3;
}

message ResponseVerifyCommitAndAccProof{
  bool status = 1;
}


message SpaceVerify {
  bytes miner_id = 1;
  repeated Int64Slice space_chals = 2 ;
  int64 space_proof_left = 3;
  int64 space_proof_right = 4;
  bytes miner_proof_hash = 5; //这是把矿工给的spaceProof计算一个哈希
  bool verify_result = 6 ;
}